// 
// C:\TEXvid_16F628A\serial.scl
// Generated by SCL Generator ver. 3.20.00.00
// 10/29/2005 16:15:47
// 


configuration for "pic16f628a" is
end configuration;


testbench for "pic16f628a" is
begin
    // Register Injection (message-based)
    process is
        file     data_file_RCREG  : text;
        variable pkt_line_RCREG   : line;
        variable status_RCREG     : file_open_status;
        variable read_ok_RCREG    : boolean;
        variable wait_time_RCREG  : time;
        variable rand_lower_RCREG,
                 rand_upper_RCREG : integer;
        variable rand_unit_RCREG  : string;
        variable rand_time_RCREG  : time;
        variable rand_seed1_RCREG : integer := 5617;
        variable rand_seed2_RCREG : integer := 20067;
        variable packet_RCREG     : string;
        variable dummy_RCREG      : integer;
        variable new_packet_RCREG : boolean := true;
    begin
        file_open(status_RCREG, data_file_RCREG, "serial.txt", read_mode);
        if status_RCREG == open_ok then
            while endfile(data_file_RCREG) == false loop
                readline(data_file_RCREG, pkt_line_RCREG);
                // skip empty line and comment line
                if match(pkt_line_RCREG, "") == true then // do nothing
                elsif match(pkt_line_RCREG, "//") == true then // do nothing
                else
                    if match(pkt_line_RCREG, "wait ") == true then
                        read(pkt_line_RCREG, dummy_RCREG); // to consume 'wait' command
                        read(pkt_line_RCREG, wait_time_RCREG);
                        wait for wait_time_RCREG;
                        new_packet_RCREG := true;
                    elsif match(pkt_line_RCREG, "rand ") == true then
                        read(pkt_line_RCREG, dummy_RCREG); // to consume 'rand' command
                        read(pkt_line_RCREG, rand_lower_RCREG);
                        read(pkt_line_RCREG, rand_upper_RCREG);
                        read(pkt_line_RCREG, rand_unit_RCREG);
                        random_time(rand_lower_RCREG, rand_upper_RCREG, rand_unit_RCREG,
                                    rand_seed1_RCREG, rand_seed2_RCREG, rand_time_RCREG);
                        wait for rand_time_RCREG;
                        new_packet_RCREG := true;
                    else
                        if new_packet_RCREG == true then
                            packetin(pkt_line_RCREG, RCREG, false); // new packet
                            wait until RCREG_packet_done;
                            new_packet_RCREG := false;
                        else
                            packetin(pkt_line_RCREG, RCREG, true); // append to previous
                            wait until RCREG_packet_done;
                        end if;
                    end if;
                end if;
            end loop;
        end if;
        file_close(data_file_RCREG);
    end process;

end testbench;

